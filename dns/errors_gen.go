// Code generated by "enumer -type=errorKind -output errors_gen.go"; DO NOT EDIT.

package dns

import (
	"fmt"
)

const (
	_errorKindName_0 = "FormatErrorServerFailureNonExistingDomainNotImplementedRefusedYXDomainYXRrsetNXRrsetNotAuthNotZone"
	_errorKindName_1 = "BadVersBadKeyBadTimeBadModeBadNameBadAlgBadTruncBadCookie"
)

var (
	_errorKindIndex_0 = [...]uint8{0, 11, 24, 41, 55, 62, 70, 77, 84, 91, 98}
	_errorKindIndex_1 = [...]uint8{0, 7, 13, 20, 27, 34, 40, 48, 57}
)

func (i errorKind) String() string {
	switch {
	case 1 <= i && i <= 10:
		i -= 1
		return _errorKindName_0[_errorKindIndex_0[i]:_errorKindIndex_0[i+1]]
	case 16 <= i && i <= 23:
		i -= 16
		return _errorKindName_1[_errorKindIndex_1[i]:_errorKindIndex_1[i+1]]
	default:
		return fmt.Sprintf("errorKind(%d)", i)
	}
}

var _errorKindValues = []errorKind{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23}

var _errorKindNameToValueMap = map[string]errorKind{
	_errorKindName_0[0:11]:  1,
	_errorKindName_0[11:24]: 2,
	_errorKindName_0[24:41]: 3,
	_errorKindName_0[41:55]: 4,
	_errorKindName_0[55:62]: 5,
	_errorKindName_0[62:70]: 6,
	_errorKindName_0[70:77]: 7,
	_errorKindName_0[77:84]: 8,
	_errorKindName_0[84:91]: 9,
	_errorKindName_0[91:98]: 10,
	_errorKindName_1[0:7]:   16,
	_errorKindName_1[7:13]:  17,
	_errorKindName_1[13:20]: 18,
	_errorKindName_1[20:27]: 19,
	_errorKindName_1[27:34]: 20,
	_errorKindName_1[34:40]: 21,
	_errorKindName_1[40:48]: 22,
	_errorKindName_1[48:57]: 23,
}

// errorKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func errorKindString(s string) (errorKind, error) {
	if val, ok := _errorKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to errorKind values", s)
}

// errorKindValues returns all values of the enum
func errorKindValues() []errorKind {
	return _errorKindValues
}

// IsAerrorKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i errorKind) IsAerrorKind() bool {
	for _, v := range _errorKindValues {
		if i == v {
			return true
		}
	}
	return false
}
