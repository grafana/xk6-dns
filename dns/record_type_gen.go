// Code generated by "enumer -type=RecordType -trimprefix RecordType -output record_type_gen.go"; DO NOT EDIT.

package dns

import (
	"fmt"
)

const _RecordTypeName = "A"

var _RecordTypeIndex = [...]uint8{0, 1}

func (i RecordType) String() string {
	i -= 1
	if i >= RecordType(len(_RecordTypeIndex)-1) {
		return fmt.Sprintf("RecordType(%d)", i+1)
	}
	return _RecordTypeName[_RecordTypeIndex[i]:_RecordTypeIndex[i+1]]
}

var _RecordTypeValues = []RecordType{1}

var _RecordTypeNameToValueMap = map[string]RecordType{
	_RecordTypeName[0:1]: 1,
}

// RecordTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RecordTypeString(s string) (RecordType, error) {
	if val, ok := _RecordTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RecordType values", s)
}

// RecordTypeValues returns all values of the enum
func RecordTypeValues() []RecordType {
	return _RecordTypeValues
}

// IsARecordType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RecordType) IsARecordType() bool {
	for _, v := range _RecordTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
